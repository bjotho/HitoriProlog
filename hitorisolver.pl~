outputFile('./hitori_solved.txt').
inputFile('./hitori_unsolved.txt').

parsingInput([],[],_).
parsingInput([H|T],[X|Y],I):-
    addingSquares(H,X,I),
    length(H,Size),
    I1 is I+Size,
    parsingInput(T,Y,I1).

addingSquares([],[],_).
addingSquares([H|T],[X|Y],I):-
    X=[H,_,I],
    I1 is I+1,
    addingSquares(T,Y,I1).

formatOutput([],[]).
formatOutput([H|T],[X|Y]):-
    extractRow(H,X),
    formatOutput(T,Y).

extractRow([],[]).
extractRow([H|T],[X|Y]):-
    ((H=[V,'W'|_],
    X=V);
    X='X'),
    extractRow(T,Y).

getHead([H|_],R):-
    R=H.

getColor([_,C|_],R):-
    R=C.

getIndex([_,_,I|_],R):-
    R=I.

getSquareByIndex([H|T],I,S):-
	getSquare(H,I,S1),
	getSquareByIndex(T,I,S1).

getSquare([],_).
getSquare([H|T],I,S):-
	getIndex(H,I);
	getSquare(T,H).

twoPlusMany([X,Y|[H|T]]):-
    write('twoPlusMany'),nl,
    X=Y,
    not(X=H),
    list_to_set(T,S),
    write(S), nl,
    member(X,S),
    twoPlusMany([Y,H|T]).

twoPlusManyRev(L):-
    write('twoPlusManyRev'),nl,
    reverse(L,N),
    twoPlusMany(N).

checkDuplicates([H|T]):-
    member(H,T),
    checkDuplicates(T).

adjacentValue([X,X|_]).
adjacentValue([_,Y|[H|T]]):-
	adjacentValue([Y,H|T]).

xSomethingX([X,Y,Z|_]):-
	getHead(X,S1),
	getHead(Z,S2),
    S1=S2,Y=[_,'W'|_].
xSomethingX([_,Y,Z|[H|T]]):-
    xSomethingX([Y,Z,H|T]).

rowN([H|_],1,H):-!.
rowN([_|T],I,X):-
    I1 is I-1,
    rowN(T,I1,X).

columnN([],_,[]).
columnN([H|T],I,[R|X]):-
	rowN(H,I,R),
	columnN(T,I,X).

threeInARow([X,Y,Z|_]):-
	getHead(X,S1),
	getHead(Y,S2),
	getHead(Z,S3),
	S1=S2,S2=S3,X=[_,'B'|_],Y=[_,'W'|_],Z=[_,'B'|_].
threeInARow([_,Y,Z|[H|T]]):-
	threeInARow([Y,Z,H|T]).

surroundBlack([X,Y|_]):-
	getColor(X,CX),
	getColor(Y,CY),
	((nonvar(CX),
	CX='B',CY='W');
	(nonvar(CY),
	CY='B',CX='W')).
surroundBlack([_,Y|[H|T]]):-
	surroundBlack([Y,H|T]).

checkxSomethingX([]).
checkxSomethingX([H|T]):-
    (xSomethingX(H),
    checkxSomethingX(T));
    (xSomethingX(H);
    checkxSomethingX(T)).

checkSurroundBlack([]).
checkSurroundBlack([H|T]):-
    (surroundBlack(H),
    checkSurroundBlack(T));
    (surroundBlack(H);
    checkSurroundBlack(T)).

getAllColumns(Size,_,N,[]):-
	N>Size.
getAllColumns(Size,SquareList,N,[H|T]):-
	columnN(SquareList,N,H),
	N1 is N+1,
	getAllColumns(Size,SquareList,N1,T).

containsDuplicates([]).
containsDuplicates([H|T]):-
    getHead(H,R),
    (member([R,'W',_],T),H=[_,'B',_];
    member([R,'B',_],T),H=[_,'W',_];
    not(member([R,_,_],T)),H=[_,'W',_]),
    containsDuplicates(T).

neighborBlack([],[],[]).
neighborBlack([_,H2,_],[_,X2,_],[_,Z2,_]):-
    H2='W',X2='B',Z2='W';
    H2='W',X2='W',Z2='B';
    H2='B',X2='W',Z2='B';
    H2='B',X2='W',Z2='W';
    H2='W',X2='W',Z2='W'.

setColors([],[],[]).
setColors([_,H2,_|_],[_,X2,_|_],[_,Z2,_]):-
    (H2='B';H2='W'),
    (X2='B';X2='W'),
    (Z2='B';Z2='W').

getSquareList([_,_]).
getSquareList([H1,H2,H3|T]):-
    setColors(H1,H2,H3),
    neighborBlack(H1,H2,H3),
    containsDuplicates([H1,H2,H3|T]),
    getSquareList([H2,H3|T]).

runBruteForce([]).
runBruteForce([H|T]):-
    getSquareList(H),
    %reverse(H,RevH),
    %getSquareList(RevH),
    runBruteForce(T).

doSolve(SizeX,SizeY,Input,Output):-
    /*parsingInput takes in a list (Input), and binds SquareList to a list of squares. Final parameter is the starting index*/
    parsingInput(Input,SquareList1,1),

    %getSquareByIndex(SquareList1,7,S),
    %print('get Square 7 By Index:'),
    %print(S),nl,

    checkxSomethingX(SquareList1),
    checkSurroundBlack(SquareList1),

    getAllColumns(SizeX,SquareList1,1,SquareListInverted1),

    checkxSomethingX(SquareListInverted1),
    checkSurroundBlack(SquareListInverted1),

    getAllColumns(SizeX,SquareListInverted1,1,SquareList2),
    getAllColumns(SizeX,SquareList2,1,SquareListInverted2),

    (runBruteForce(SquareList2);
    runBruteForce(SquareListInverted2)),

    getAllColumns(SizeX,SquareListInverted2,1,SquareList3),

    /*formatOutput takes in a solved hitori puzzle list and generates output in the desired format*/
    formatOutput(SquareList3,Output).

doSolve(_,_,Solution,Solution).

/********************* writing the result */
writeFullOutput(S, X, Y):- write(X), write('x'), write(Y), nl, writeOutput(S).

writeOutput([]).
writeOutput([E|R]):- writeLine(E), writeOutput(R).

writeLine([]):- nl.
writeLine([E|R]):- write(' '), write(E), writeLine(R).

/********************** reading the input */
readProblem(N,M,Problem):- readInt(N), readInt(M), M=N, length(Problem, M), readProblemLines(N,Problem).

readProblemLines(_,[]).
readProblemLines(N,[H|T]):- length(H,N), readLine(H), readProblemLines(N,T).

readLine([]).
readLine([E|R]):- readInt(E), readLine(R).

readInt(N):- get_code(M), handleCode(M,N).

handleCode(M,N):- is_number_code(M,N1), !, continueInt(N1,N).
handleCode(-1,_):- !, fail. /* EOF */
handleCode(_,N):- readInt(N).

continueInt(O,N):- get_code(M), is_number_code(M,M1), !, H is 10*O+M1, continueInt(H,N).
continueInt(N,N).

is_number_code(N, N1):- N>=48, N<58, N1 is N-48.

/*********************** global control: starting the algorithm and the reading */
run:- inputFile(IF), see(IF), outputFile(F), tell(F), readInt(N), write(N), nl, solveProblems(N), told, seen, !.
run:- told, seen. /* close the files */

solveProblems(0).
solveProblems(N):- N>0, readProblem(X, Y, I), doSolve(X, Y, I, S), writeFullOutput(S, X, Y), !, N1 is N-1, solveProblems(N1).

:- nl,nl,write(' try running "?- run."'), nl,nl,nl.

:- run.
